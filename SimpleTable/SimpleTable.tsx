import { Button, Dropdown, Table } from "antd";
import React from "react";
import {
  DownOutlined,
  FileExcelOutlined,
  FilePdfOutlined,
} from "@ant-design/icons";
import "./SimpleTable.scss";
import { Excel } from "antd-table-saveas-excel";
import { useNavigate } from "react-router-dom";
import { auth } from "../../../CommonMethods/API/Auth";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { convertDate } from "../../../Helper/Util";
import { makeFirstLetterCapital } from "../../../CommonMethods/Helper/Methods";

interface IHeaderButtons {
  title: string;
  Icon: JSX.Element;
  action: string | React.Dispatch<React.SetStateAction<boolean>>;
}

function NormalTable(props: {
  columns: any[];
  data: any[];
  tableName?: string;
  details?: any;
  dropDown?: any[];
  filter?: any;
  HeaderButtons?: IHeaderButtons[];
  rowSelection?: {
    onChange?: any;
    selectedRowKeys?: Array<string>;
  };
  rowKey?: string | any;
  pagination?: boolean;
  yScroll?: boolean;
  xScroll?: boolean;
  exportable?: boolean;
  selectedRowKeys?: string[];
  isItSideTable?: boolean;
  exportToPdf?: boolean;
}) {
  const {
    columns,
    data,
    tableName,
    details,
    dropDown,
    filter,
    HeaderButtons,
    rowSelection,
    rowKey,
    pagination,
    yScroll,
    xScroll,
    exportable,
    selectedRowKeys,
    isItSideTable,
    exportToPdf,
  } = props;

  const navigate = useNavigate();
  const { getCurrentRole, isAuthenticated } = auth;

  const exportAsPdf = () => {
    const pdfSize = columns.length >= 10 ? "a3" : "a4";
    const doc = new jsPDF("l", "pt", pdfSize).setFontSize(10);
    let newHeader = columns.map((item) => ({
      header: item.title,
      dataKey: item.dataIndex,
    }));
    data.forEach((item) => {
      item.lrd =
        item.lrd && convertDate(new Date(item.lrd), { timeRequired: false });
      item.created_at =
        item.created_at &&
        convertDate(new Date(item.created_at), { timeRequired: true });
      item.entity_name =
        item.entity_name && makeFirstLetterCapital(item.entity_name);
    });

    autoTable(doc, {
      columnStyles: {
        operation_type: { cellWidth: 100 },
        entity_id: { cellWidth: 200 },
        entity_name: { cellWidth: 100 },
      },
      theme: "plain",
      margin: 50,
      pageBreak: "auto",
      styles: {
        fontSize: 10,
        minCellWidth: 40,
        lineWidth: 0.5,
        lineColor: "#F9D1BE",
        overflow: "linebreak",
        halign: "left",
        valign: "top",
      },
      headStyles: {
        fillColor: "#DD2515",
        textColor: "white",
      },
      columns: newHeader,
      body: data,
    });
    const pageCount = doc.getNumberOfPages();
    for (var i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.text(`Audit Log`, 390, 30);
      doc.text(
        `Date and Time: ${convertDate(new Date(), { timeRequired: true })}`,
        660,
        13
      );
      doc.text(`Generated By: ${isAuthenticated().user.name}`, 660, 25);
      doc.text("Page " + String(i) + " of " + String(pageCount), 4, 590);
      doc.text(
        `Action Reason: 1: Create 2: Update 3: Delete 4: View`,
        600,
        590
      );
    }
    doc.save(`${tableName || "soteriusTableData"}.pdf`);
  };

  console.log(columns);
  console.log(data);

  return (
    <div className="normalTable">
      <Table
        columns={columns}
        dataSource={data}
        rowSelection={
          rowSelection ? { type: "checkbox", ...rowSelection } : undefined
        }
        rowKey={rowKey || "id"}
        title={() => (
          <>
            <div className="tableHeader">
              <h2>{tableName}</h2>
              <div className="tableHeaderBtns">
                {filter}
                {dropDown && (
                  <Dropdown overlay={dropDown[0].items}>
                    <Button type="text" icon={<DownOutlined />}>
                      {dropDown[0].title}
                    </Button>
                  </Dropdown>
                )}
                {HeaderButtons &&
                  getCurrentRole() !== 2 &&
                  HeaderButtons.map((button, idx) => (
                    <Button
                      key={idx}
                      type="primary"
                      icon={button.Icon}
                      onClick={() => {
                        typeof button.action !== "string"
                          ? button.action(true)
                          : navigate(button.action);
                      }}
                    >
                      {button.title}
                    </Button>
                  ))}
                {exportable && (
                  <Button
                    disabled={
                      selectedRowKeys
                        ? selectedRowKeys.length > 0
                          ? false
                          : data.length === 0 && !rowSelection
                          ? false
                          : true
                        : data.length > 0
                        ? false
                        : true
                    }
                    type={HeaderButtons ? "default" : "primary"}
                    icon={<FileExcelOutlined />}
                    onClick={() => {
                      const excel = new Excel();
                      excel
                        .addSheet("test")
                        .addColumns(columns)
                        .addDataSource(
                          selectedRowKeys
                            ? selectedRowKeys.length > 0
                              ? data.filter((ele) => {
                                  return isItSideTable
                                    ? selectedRowKeys.includes(ele.uId)
                                    : selectedRowKeys.includes(ele.id);
                                })
                              : data
                            : data
                        )
                        .saveAs(
                          tableName
                            ? `${tableName}.xlsx`
                            : "soteriusTableData.xlsx"
                        );
                    }}
                  >
                    Export to CSV
                  </Button>
                )}
                {exportToPdf && (
                  <Button
                    type={HeaderButtons ? "default" : "primary"}
                    icon={<FilePdfOutlined />}
                    onClick={() => exportAsPdf()}
                  >
                    Export
                  </Button>
                )}
              </div>
            </div>
            {details}
          </>
        )}
        pagination={
          pagination && {
            showQuickJumper: true,
            defaultCurrent: 1,
            defaultPageSize: 10,
            pageSize: 10,
            hideOnSinglePage: true,
            pageSizeOptions: [10, 20],
          }
        }
        scroll={
          yScroll
            ? { y: 500 }
            : xScroll
            ? { x: 500 }
            : yScroll && xScroll
            ? { y: 500, x: 500 }
            : {}
        }
      />
    </div>
  );
}

export default NormalTable;
